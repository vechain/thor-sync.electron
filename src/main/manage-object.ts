
// to manage promises generated by object
export function manageObject<T extends object>(obj: T, signal: { disconnected: boolean }): T {
    return new Proxy(obj, {
        get: (target, key, receiver) => {
            const prop = Reflect.get(target, key, receiver)
            if (target.hasOwnProperty(key)) {
                if (prop instanceof Object) {
                    return manageObject(prop, signal)
                }
            }
            return prop
        },
        apply: (target, thisArg, argArray) => {
            const result = Reflect.apply(target as any, thisArg, argArray)
            if (result instanceof Promise) {
                return managePromise(result, signal)
            }
            if (result instanceof Object) {
                return manageObject(result, signal)
            }
            return result
        }
    })
}

function managePromise<T>(p: Promise<T>, signal: { disconnected: boolean }) {
    return new Promise<T>((resolve, reject) => {
        p.then(r => {
            if (!signal || !signal.disconnected) {
                resolve(r)
            }
        }).catch(err => {
            if (!signal || !signal.disconnected) {
                reject(err)
            }
        })
    })
}

